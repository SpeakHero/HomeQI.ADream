// <auto-generated />
using System;
using HomeQI.ADream.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeQI.ADream.Identity.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.Organization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("OrgCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.Permission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .IsRequired();

                    b.Property<string>("AreaName");

                    b.Property<string>("Controller")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsAllowAnonymous");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<int>("Level");

                    b.Property<string>("Params");

                    b.Property<int>("ShowSort");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedName");

                    b.Property<string>("UserId");

                    b.Property<string>("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.RoleClaim", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("PermissionId")
                        .IsRequired();

                    b.Property<string>("Regular");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityAudit");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Sex");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserClaimId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserClaimId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.UserClaim", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .IsRequired();

                    b.Property<string>("ClaimValue")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("PermissionId")
                        .IsRequired();

                    b.Property<string>("Regular");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.UserLogin", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.UserOrg", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OrganizationId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrgs");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.UserToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LoginProvider")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.Permission", b =>
                {
                    b.HasOne("HomeQI.ADream.Identity.Entites.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.Role", b =>
                {
                    b.HasOne("HomeQI.ADream.Identity.Entites.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");

                    b.HasOne("HomeQI.ADream.Identity.Entites.UserRole")
                        .WithMany("Roles")
                        .HasForeignKey("UserRoleId");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.RoleClaim", b =>
                {
                    b.HasOne("HomeQI.ADream.Identity.Entites.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.User", b =>
                {
                    b.HasOne("HomeQI.ADream.Identity.Entites.UserClaim")
                        .WithMany("User")
                        .HasForeignKey("UserClaimId");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.UserLogin", b =>
                {
                    b.HasOne("HomeQI.ADream.Identity.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.UserOrg", b =>
                {
                    b.HasOne("HomeQI.ADream.Identity.Entites.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeQI.ADream.Identity.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.UserRole", b =>
                {
                    b.HasOne("HomeQI.ADream.Identity.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeQI.ADream.Identity.Entites.UserToken", b =>
                {
                    b.HasOne("HomeQI.ADream.Identity.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
