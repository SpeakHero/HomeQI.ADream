// <auto-generated />
using System;
using HomeQI.Adream.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeQI.ADream.Identity.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Id")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasAlternateKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Id")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.HasKey("UserId", "RoleId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<string>("CretaedUser")
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("EditeUser")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("EditedTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Id")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasAlternateKey("Id");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HomeQI.Adream.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HomeQI.Adream.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HomeQI.Adream.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("HomeQI.Adream.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HomeQI.Adream.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HomeQI.Adream.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HomeQI.Adream.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
